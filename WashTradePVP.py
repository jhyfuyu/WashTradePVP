import asyncio
import random
from telethon import TelegramClient, types, functions, errors
import uuid
import json
from datetime import datetime
import logging
import os
import requests
from telethon.tl.custom import Conversation
import signal
import sys
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError

KEYS_FILE = 'bot_keys.json'


def verify_key(key, device_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
    """
    url = 'http://38.180.254.132:8000/keys'
    data = {'keys': key, 'device': device_id}

    response = requests.post(url, data=json.dumps(data))
    print(response.json())
    if response.json()['status'] != 'success':
        return False, '–ö–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–∏–±–æ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ'

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
    '''if not key_data['activated']:
        key_data['activated'] = True
        key_data['device_id'] = device_id
        key_data['activation_time'] = datetime.now().isoformat()

        with open(KEYS_FILE, 'w') as f:
            json.dump(keys, f, indent=4)'''

    return True, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"


def check_subscription(key):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if key == True:
        return True
    return False


def get_or_create_device_id():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ device_id
    """
    DEVICE_ID_FILE = 'device_id.json'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if os.path.exists(DEVICE_ID_FILE):
        with open(DEVICE_ID_FILE, 'r') as f:
            data = json.load(f)
            return data.get('device_id')

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID
    device_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º device_id –≤ —Ñ–∞–π–ª
    with open(DEVICE_ID_FILE, 'w') as f:
        json.dump({'device_id': device_id}, f)

    return device_id


def get_int_input(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


def save_api_params(accounts):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª
    """
    api_data = []
    for pair in accounts:
        pair_data = {
            'first_account': {
                'api_id': pair['first_account']['api_id'],
                'api_hash': pair['first_account']['api_hash'],
                'phone_number': pair['first_account']['phone_number'],
                'username': pair['first_account']['username']
            },
            'second_account': {
                'api_id': pair['second_account']['api_id'],
                'api_hash': pair['second_account']['api_hash'],
                'phone_number': pair['second_account']['phone_number'],
                'username': pair['second_account']['username']
            }
        }
        api_data.append(pair_data)

    try:
        with open('api_params.json', 'w') as f:
            json.dump(api_data, f, indent=4)
        print("‚úÖ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {str(e)}")


def load_api_params():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    try:
        if os.path.exists('api_params.json'):
            with open('api_params.json', 'r') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {str(e)}")
    return None


def get_leverage_mode():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ—á–æ–º
    """
    while True:
        print("\nüìà –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ—á–æ–º:")
        print("1. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
        print("   - –í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ")
        print("   - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
        print("   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫")
        print("\n2. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
        print("   - –í—ã–±–∏—Ä–∞–µ—Ç 3-–µ –ø–ª–µ—á–æ –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞")
        print("   - –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏")
        print("   - –ú–µ–Ω—å—à–∏–π —Ä–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏")

        try:
            mode = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1 –∏–ª–∏ 2): "))
            if mode in [1, 2]:
                return mode
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def select_leverage(available_leverages, mode):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–ª–µ—á–æ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É

    Args:
        available_leverages (list): –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–ª–µ—á–∞
        mode (int): –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (1 - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, 2 - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)

    Returns:
        int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞
    """
    if not available_leverages:
        return None

    if mode == 1:  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        return max(available_leverages)
    else:  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if len(available_leverages) >= 3:
            return available_leverages[2]  # –¢—Ä–µ—Ç—å–µ –ø–ª–µ—á–æ –æ—Ç –Ω–∞—á–∞–ª–∞
        return available_leverages[0]  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 –ø–ª–µ—á, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ


def input_account_details():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    saved_params = load_api_params()
    if saved_params:
        print("\nüíæ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {len(saved_params)}")
        for i, pair in enumerate(saved_params):
            print(f"\n–ü–∞—Ä–∞ #{i + 1}:")
            print(f"–ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {pair['first_account']['phone_number']} ({pair['first_account']['username']})")
            print(f"–í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç: {pair['second_account']['phone_number']} ({pair['second_account']['username']})")

        use_saved = input("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã? (y/n): ").lower() == 'y'
        if use_saved:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            tokens = []
            for i in range(len(saved_params)):
                print(f"\nüíé –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã #{i + 1} (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–≤–∞–∂–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
                pair_tokens = []
                while True:
                    token = input("–¢–æ–∫–µ–Ω: ").strip()
                    if not token:
                        if pair_tokens:
                            break
                        print("‚ùå –ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω")
                        continue
                    pair_tokens.append(token)
                tokens.append(pair_tokens)
            return saved_params, tokens

    accounts = []
    tokens = []

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    while True:
        try:
            num_pairs = int(input("\nüì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤: "))
            if num_pairs > 0:
                break
            print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    for pair_num in range(num_pairs):
        print(f"\nüîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ #{pair_num + 1}")

        # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        print("\nÔøΩÔøΩ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–≤–∞–∂–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        pair_tokens = []
        while True:
            token = input("–¢–æ–∫–µ–Ω: ").strip()
            if not token:
                if pair_tokens:  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω
                    break
                print("‚ùå –ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω")
                continue
            pair_tokens.append(token)
        tokens.append(pair_tokens)

        # –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        print(f"\nüë§ –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—ã #{pair_num + 1}")
        first_account = {
            'api_id': input("API ID: ").strip(),
            'api_hash': input("API Hash: ").strip(),
            'phone_number': input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip(),
            'username': input("Username –±–æ—Ç–∞: ").strip()
        }

        # –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        print(f"\nüë§ –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—ã #{pair_num + 1}")
        second_account = {
            'api_id': input("API ID: ").strip(),
            'api_hash': input("API Hash: ").strip(),
            'phone_number': input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip(),
            'username': "@pvptrade_bot"
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        if all(first_account.values()) and all(second_account.values()):
            accounts.append({
                'first_account': first_account,
                'second_account': second_account
            })
        else:
            print("‚ùå –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return input_account_details()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\n‚úÖ –ü–∞—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ #{pair_num + 1} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:")
        print(f"–ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {first_account['phone_number']} ({first_account['username']})")
        print(f"–í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç: {second_account['phone_number']} ({second_account['username']})")
        print(f"–¢–æ–∫–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {', '.join(pair_tokens)}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
    for i, account_pair in enumerate(accounts):
        print(f"\n–ü–∞—Ä–∞ #{i + 1}:")
        print(f"–ê–∫–∫–∞—É–Ω—Ç 1: {account_pair['first_account']['phone_number']}")
        print(f"–ê–∫–∫–∞—É–Ω—Ç 2: {account_pair['second_account']['phone_number']}")
        print(f"–¢–æ–∫–µ–Ω—ã: {', '.join(tokens[i])}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if input("\n‚ú® –í—Å–µ –≤–µ—Ä–Ω–æ? (y/n): ").lower() != 'y':
        return input_account_details()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    save = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è? (y/n): ").lower() == 'y'
    if save:
        save_api_params(accounts)

    return accounts, tokens


# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
def log_trade(username, token, direction, size, leverage, status):
    trade_info = {
        'timestamp': datetime.now().isoformat(),
        'username': username,
        'token': token,
        'direction': direction,
        'size': size,
        'leverage': leverage,
        'status': status
    }

    logging.info(f"Trade: {json.dumps(trade_info)}")
    print(f"Trade logged: {trade_info}")


class SignalHandler:
    def __init__(self):
        self.shutdown_requested = False
        signal.signal(signal.SIGINT, self.request_shutdown)
        signal.signal(signal.SIGTERM, self.request_shutdown)

    def request_shutdown(self, signum, frame):
        print("\nüõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")
        self.shutdown_requested = True


async def emergency_close_positions(client, username, tokens):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {username}")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è
        await client.send_message(username, "/close")
        await asyncio.sleep(3)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        messages = await client.get_messages(username, limit=5)
        position_found = False
        no_position_phrases = [
            "you have no open perps positions",
            "–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π",
            "no positions to close"
        ]

        for msg in messages:
            if msg.text and any(phrase in msg.text.lower() for phrase in no_position_phrases):
                print(f"[{username}] ‚úÖ –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π")
                return
            if msg.reply_markup:
                for row in msg.reply_markup.rows:
                    for btn in row.buttons:
                        if any(token.lower() in btn.text.lower() for token in tokens):
                            position_found = True
                            break

        if not position_found:
            print(f"[{username}] ‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return

        # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è
        print(f"[{username}] üü† –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏...")
        for msg in messages:
            if msg.reply_markup:
                for token in tokens:
                    for row in msg.reply_markup.rows:
                        for btn in row.buttons:
                            if token.lower() in btn.text.lower():
                                await msg.click(data=btn.data)
                                print(f"[{username}] ‚úÖ –¢–æ–∫–µ–Ω: {token}")
                                await asyncio.sleep(3)
                                
                                # 100% –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                                msgs = await client.get_messages(username, limit=3)
                                for m in msgs:
                                    if m.reply_markup:
                                        for r in m.reply_markup.rows:
                                            for b in r.buttons:
                                                if "100" in b.text:
                                                    await m.click(data=b.data)
                                                    await asyncio.sleep(2)
                                                    confirm_msgs = await client.get_messages(username, limit=3)
                                                    for cm in confirm_msgs:
                                                        if cm.reply_markup:
                                                            for rc in cm.reply_markup.rows:
                                                                for bc in rc.buttons:
                                                                    if "confirm" in bc.text.lower():
                                                                        await cm.click(data=bc.data)
                                                                        print(f"[{username}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                                                                        return
        print(f"[{username}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏")

    except Exception as e:
        print(f"[{username}] ‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def safe_disconnect(client, account_info, tokens):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π"""
    try:
        await emergency_close_positions(client, account_info['username'], tokens)
    finally:
        await client.disconnect()


async def send_message(client, username, message):
    try:
        await client.send_message(username, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {username}: {str(e)}")


async def click_button_with_condition(client, account_name, entity, condition):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    """
    MAX_RETRIES = 3

    for attempt in range(MAX_RETRIES):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await client.get_messages(entity=entity, limit=5)

            print(f"[{account_name}] üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES})")

            for message in messages:
                if not message or not message.reply_markup:
                    continue

                print(f"\n[{account_name}] –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
                print(f"[{account_name}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")

                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                found_button = None
                for row in message.reply_markup.rows:
                    for button in row.buttons:
                        print(f" - '{button.text}'")
                        if condition(button.text):
                            found_button = button
                            break
                    if found_button:
                        break

                if found_button:
                    print(f"[{account_name}] üéØ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–Ω–æ–ø–∫–∞: {found_button.text}")
                    try:
                        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                        await message.click(data=found_button.data)
                        print(f"[{account_name}] ‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞")
                        await asyncio.sleep(2)  # –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞
                        return True

                    except Exception as e:
                        print(f"[{account_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")
                        if attempt < MAX_RETRIES - 1:
                            await asyncio.sleep(2)
                        continue

            print(f"[{account_name}] ‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if attempt < MAX_RETRIES - 1:
                print(f"[{account_name}] üò¥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(3)

        except Exception as e:
            print(f"[{account_name}] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(3)

    print(f"[{account_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")
    return False


def find_max_leverage(buttons):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–ª–µ—á–∞
    """
    max_leverage = 0
    max_leverage_button = None

    for button in buttons:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "10x" –ø–æ–ª—É—á–∞–µ–º 10)
        text = button.text.lower().replace('—Ö', 'x')  # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫—É—é —Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é
        if 'x' in text:
            try:
                leverage = int(text.split('x')[0])
                if leverage > max_leverage:
                    max_leverage = leverage
                    max_leverage_button = button
            except ValueError:
                continue

    return max_leverage_button


def get_opposite_leverage(number: str, leverage: str) -> dict:
    with open('leverage.json', 'r') as file:
        data = json.load(file)
    return data


def save_opposite_leverage(number: str, leverage: str) -> None:
    with open('leverage.json', 'r') as file:
        data = json.load(file)

    data[number] = leverage

    with open('leverage.json', 'w') as filename:
        json.dump(data, filename)


async def account_task(client, username, number, tokens, hold_time, token_queue=None, size_queue=None, delay=0,
                       size_of_trading=15,
                       trade_type=None):
    attempts = 0
    max_attempts = 3

    while attempts < max_attempts:
        try:
            print(f"[{username}] üöÄ –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–ª–∏")

            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (/long –∏–ª–∏ /short)
            current_command = trade_type if trade_type else random.choice(['/long', '/short'])
            await send_message(client, username, current_command)
            await asyncio.sleep(3)

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ /coin)
            if token_queue:
                try:
                    first_token = await asyncio.wait_for(token_queue.get(), timeout=1)
                    available_tokens = [t for t in tokens if t != first_token]
                    token_for_value = available_tokens[0]
                    print(f"[{username}] üíé –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–ª —Ç–æ–∫–µ–Ω: {token_for_value}")
                except asyncio.TimeoutError:
                    token_for_value = random.choice(tokens)
                    print(f"[{username}] üíé –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–ª —Ç–æ–∫–µ–Ω: {token_for_value}")
                    await token_queue.put(token_for_value)
            else:
                token_for_value = random.choice(tokens)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            await send_message(client, username, token_for_value)
            await asyncio.sleep(3)

            # 3. –í—ã–±–æ—Ä –ø–ª–µ—á–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
            leverage_success = False
            for leverage_attempt in range(3):
                messages = await client.get_messages(username, limit=5)
                for message in messages:
                    if message and message.reply_markup:
                        all_buttons = []
                        for row in message.reply_markup.rows:
                            all_buttons.extend(row.buttons)

                        max_leverage_button = find_max_leverage(all_buttons)
                        save_opposite_leverage(number, max_leverage_button)

                        if max_leverage_button:
                            await message.click(data=max_leverage_button.data)
                            leverage_success = True
                            break
                if leverage_success:
                    break
                await asyncio.sleep(3)

            if not leverage_success:
                print(f"[{username}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ—á–æ")
                attempts += 1
                continue

            await asyncio.sleep(3)

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –±–µ–∑ /size)

            print(f"[{username}] üí∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {size_of_trading}")
            await send_message(client, username, str(size_of_trading))
            await asyncio.sleep(5)

            # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
            confirm_success = False
            for confirm_attempt in range(3):
                print(f"[{username}] üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ {confirm_attempt + 1}/3")
                messages = await client.get_messages(username, limit=5)

                for message in messages:
                    if message and message.reply_markup:
                        for row in message.reply_markup.rows:
                            for button in row.buttons:
                                button_text = button.text.lower()
                                if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in button_text or "confirm" in button_text:
                                    try:
                                        await message.click(data=button.data)
                                        print(f"[{username}] ‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                                        confirm_success = True
                                        await asyncio.sleep(3)  # –ñ–¥–µ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                        break
                                    except Exception as e:
                                        print(f"[{username}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {str(e)}")
                            if confirm_success:
                                break
                    if confirm_success:
                        break

                if confirm_success:
                    break

                print(f"[{username}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                await asyncio.sleep(3)

            if not confirm_success:
                print(f"[{username}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                attempts += 1
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
            await asyncio.sleep(5)
            print(f"[{username}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
            print(f"[{username}] ‚è≥ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {hold_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(hold_time)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            print(f"[{username}] üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
            await send_message(client, username, f"/close {token_for_value} 100%")
            await asyncio.sleep(5)

            messages = await client.get_messages(username, limit=5)

            for message in messages:
                if message and message.reply_markup:
                    for row in message.reply_markup.rows:
                        for button in row.buttons:
                            print
                            button_text = button.text.lower()
                            if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in button_text or "confirm" in button_text:
                                try: 
                                    await message.click(data=button.data)
                                    print(f"[{username}] ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
                                    confirm_success = True
                                    await asyncio.sleep(3)  # –ñ–¥–µ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                    break
                                except Exception as e:
                                    print(f"[{username}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {str(e)}")
            
            await asyncio.sleep(5)
            print(f"[{username}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            return token_for_value

        except Exception as err:
            print(f"[{username}] ‚ùå –û—à–∏–±–∫–∞: {str(err)}")
            attempts += 1
            await asyncio.sleep(5)

    print(f"[{username}] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫")
    return None


async def send_error_notification(client, user_username, pair_index, account1, account2, error_msg):  # MODIFIED
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç Telethon"""
    try:
        message = (
            f"üö® –ü–∞—Ä–∞ #{pair_index + 1} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–ê–∫–∫–∞—É–Ω—Ç 1: {account1['phone_number']} ({account1['username']})\n"
            f"–ê–∫–∫–∞—É–Ω—Ç 2: {account2['phone_number']} ({account2['username']})\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∞—Ä–µ
        await client.send_message(user_username, message)  # MODIFIED
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç
        try:
            await client.send_message(user_username, "‚ÄºÔ∏è Critical error! Check logs!")
        except:
            pass


async def run_account_pair(not_us, pair_index, client1, client2, account_pair, tokens, trading_params):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    token_queue = asyncio.Queue()
    size_queue = asyncio.Queue()
    pair_active = True
    last_error = None

    while pair_active:
        try:
            print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {pair_index + 1}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ trade_types –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            pair_trade_types = random.sample([('/long', '/short'), ('/short', '/long')], 1)[0]
            print(f"[–ü–∞—Ä–∞ {pair_index + 1}] üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {pair_trade_types[0]} –∏ {pair_trade_types[1]}")

            delay_between_accounts = random.randint(
                trading_params['min_delay'],
                trading_params['max_delay']
            )

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
            while not token_queue.empty():
                await token_queue.get()
            while not size_queue.empty():
                await size_queue.get()

            min_hold_time = trading_params['min_hold_time']
            max_hold_time = trading_params['max_hold_time']
            hold_time = random.randint(min_hold_time, max_hold_time)

            sizes = random.randint(trading_params['min_size'], trading_params['max_size'])

            async def run_second_account():
                try:
                    print(
                        f"‚è≥ –ü–∞—Ä–∞ {pair_index + 1}: –û–∂–∏–¥–∞–Ω–∏–µ {delay_between_accounts} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ö–µ–¥–∂–∏—Ä—É—é—â–µ–π —Å–¥–µ–ª–∫–æ–π")
                    await asyncio.sleep(delay_between_accounts)

                    result = await account_task(
                        client2,
                        account_pair['second_account']['username'],
                        account_pair['second_account']['phone_number'],
                        tokens,
                        hold_time,
                        token_queue=token_queue,
                        size_queue=size_queue,
                        size_of_trading=sizes,
                        trade_type=pair_trade_types[1]
                    )
                    if result is None:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –≤—Ç–æ—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                    return result
                except Exception as e:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await send_error_notification(client2, str(e), account_pair['second_account'])
                    raise

            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = await asyncio.gather(
                    account_task(
                        client1,
                        account_pair['first_account']['username'],
                        account_pair['first_account']['phone_number'],
                        tokens,
                        hold_time,
                        token_queue=token_queue,
                        size_queue=size_queue,
                        size_of_trading=sizes,
                        trade_type=pair_trade_types[0]
                    ),
                    run_second_account(),
                    return_exceptions=True
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if any(isinstance(r, Exception) for r in results):
                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ª—é–±–æ–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    print(f"[–ü–∞—Ä–∞ {pair_index + 1}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø–∞—Ä—ã")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    if isinstance(results[0], Exception):
                        await send_error_notification(
                            client1,
                            str(results[0]),
                            account_pair['first_account']
                        )

                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä—É
                    pair_active = False

                    error_message = (
                        f"üö´ –ü–∞—Ä–∞ #{pair_index + 1} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫:\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç 1: {account_pair['first_account']['phone_number']}\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç 2: {account_pair['second_account']['phone_number']}"
                    )
                    print(error_message)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—ã
                    try:
                        NOTIFICATION_RECIPIENT = not_us
                        await client1.send_message(NOTIFICATION_RECIPIENT, error_message)
                    except:
                        pass

                    break

                print(f"[–ü–∞—Ä–∞ {pair_index + 1}] ‚úÖ –û–±–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                delay_between_iterations = random.randint(
                    trading_params['min_iteration_delay'],
                    trading_params['max_iteration_delay']
                )
                print(f"‚è≥ –ü–∞—Ä–∞ {pair_index + 1}: –û–∂–∏–¥–∞–Ω–∏–µ {delay_between_iterations} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π")
                await asyncio.sleep(delay_between_iterations)

            except Exception as e:
                print(f"[–ü–∞—Ä–∞ {pair_index + 1}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                pair_active = False
                await send_error_notification(client1, not_us, account_pair['first_account'], account_pair['second_account'], str(e))

        except Exception as e:
            print(f"[–ü–∞—Ä–∞ {pair_index + 1}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—ã: {str(e)}")
            pair_active = False
            try:
                await send_error_notification(client1, not_us, account_pair['first_account'], account_pair['second_account'], str(e))
            except:
                pass


async def main():
    handler  = SignalHandler()
        
    # –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    activation_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: ")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_id = get_or_create_device_id()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    success, message = verify_key(activation_key, device_id)
    if not success:
        print(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {message}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = check_subscription(success)
    if not subscription:
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        return

    print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: –±–∞–∑–æ–≤—ã–π")

    user_username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (@username): ").strip() 

    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trading_params = input_trading_parameters()

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts, tokens_list = input_account_details()

    clients = []
    all_tasks = []

    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –≤–µ—Ä—Å–∏–π —Å–∏—Å—Ç–µ–º—ã –∏ –≤–µ—Ä—Å–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    system_versions = ['Android 10', 'Android 11', 'iOS 14', 'iOS 15']
    device_models = ['Samsung Galaxy S21', 'iPhone 12', 'Google Pixel 5', 'OnePlus 9']
    app_versions = ['7.0', '7.1', '7.2', '7.3']

    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏
    for i, account_pair in enumerate(accounts):
        # –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—ã
        client1 = TelegramClient(
            f'session_name_{i * 2 + 1}',
            account_pair['first_account']['api_id'],
            account_pair['first_account']['api_hash'],
            system_version=random.choice(system_versions),
            device_model=random.choice(device_models),
            app_version=random.choice(app_versions)
        )
        await client1.start(account_pair['first_account']['phone_number'])
        clients.append(client1)

        # –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—ã
        client2 = TelegramClient(
            f'session_name_{i * 2 + 2}',
            account_pair['second_account']['api_id'],
            account_pair['second_account']['api_hash'],
            system_version=random.choice(system_versions),
            device_model=random.choice(device_models),
            app_version=random.choice(app_versions)
        )
        await client2.start(account_pair['second_account']['phone_number'])
        clients.append(client2)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        task = run_account_pair(
            user_username,
            pair_index=i,
            client1=client1,
            client2=client2,
            account_pair=account_pair,
            tokens=tokens_list[i],
            trading_params=trading_params,
        )
        all_tasks.append(task)

    try:
        main_trade_task = asyncio.gather(*all_tasks)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while not handler.shutdown_requested:
            await asyncio.sleep(0.5)
            
        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        print("\nüõë –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        main_trade_task.cancel()
        try:
            await main_trade_task
        except asyncio.CancelledError:
            print("‚úÖ –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á: {e}")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    finally:
        if handler.shutdown_requested:
            print("\nüîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            disconnect_tasks = []  # –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫

            # –î–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            for i in range(len(accounts)):
                first_client = clients[i*2]
                second_client = clients[i*2+1]
                tokens = tokens_list[i]
                
                disconnect_tasks.append(
                    safe_disconnect(first_client, accounts[i]['first_account'], tokens)
                )
                disconnect_tasks.append(
                    safe_disconnect(second_client, accounts[i]['second_account'], tokens)
                )

            await asyncio.gather(*disconnect_tasks, return_exceptions=True)
            print("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
            sys.exit(0)
        for client in clients:
            await client.disconnect()
        
    while not handler.shutdown_requested:
        await asyncio.sleep(1)


def input_trading_parameters():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    print("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏")

    params = {}

    try:
        # –†–∞–∑–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏
        print("\nüí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        params['min_size'] = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏: "))
        params['max_size'] = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏: "))

        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        print("\n‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
        params['min_hold_time'] = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: "))
        params['max_hold_time'] = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: "))

        # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ –ø–∞—Ä–µ
        print("\n‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ –ø–∞—Ä–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
        params['min_delay'] = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: "))
        params['max_delay'] = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: "))

        # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        print("\n‚åõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
        params['min_iteration_delay'] = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: "))
        params['max_iteration_delay'] = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: "))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if any(v < 0 for v in params.values()):
            print("‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏!")
            return input_trading_parameters()

        if params['min_size'] > params['max_size'] or \
                params['min_hold_time'] > params['max_hold_time'] or \
                params['min_delay'] > params['max_delay'] or \
                params['min_iteration_delay'] > params['max_iteration_delay']:
            print("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö!")
            return input_trading_parameters()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"–†–∞–∑–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏: {params['min_size']} - {params['max_size']}")
        print(f"–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {params['min_hold_time']} - {params['max_hold_time']} —Å–µ–∫")
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {params['min_delay']} - {params['max_delay']} —Å–µ–∫")
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏: {params['min_iteration_delay']} - {params['max_iteration_delay']} —Å–µ–∫")

        if input("\n‚ú® –í—Å–µ –≤–µ—Ä–Ω–æ? (y/n): ").lower() != 'y':
            return input_trading_parameters()

        return params

    except ValueError:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
        return input_trading_parameters()


if __name__ == '__main__':
    asyncio.run(main())
